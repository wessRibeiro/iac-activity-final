name: Terraform CI
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        options:
          - production
        description: Name of the target environment.    
      AWS_ACCESS_KEY_ID:
        type: string
        description: aws key access.      
      AWS_SECRET_ACCESS_KEY:
        type: string
        description: aws secret key access.                
      AWS_SESSION_TOKEN:
        type: string
        description: aws session token.
      AWS_REGION:
        type: choice
        options:
          - us-east-1
        description: aws region.   
        
jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       TF_LOG: INFO
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: terraform
    steps:    
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Use Node.js 
        uses: actions/setup-node@v4  
        with:
          node-version: latest
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID || vars.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY || vars.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ inputs.AWS_SESSION_TOKEN || vars.AWS_SESSION_TOKEN }}
          aws-region: ${{ inputs.AWS_REGION }}
      
      - name: Create .tfvars file
        run: |
          echo "public_key = \"${{ vars.AWS_PUBLIC_KEY }}\"" > terraform.tfvars
          
      - name: Verify .tfvars file
        run: cat terraform.tfvars    

      - name: Setup terraform 
        uses: hashicorp/setup-terraform@v3
      
      - name: Terraform fmt -check
        id: fmt
        run: terraform fmt 
        continue-on-error: false
                 
      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="bucket=${{ vars.BUCKET_NAME }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ inputs.AWS_REGION }}"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate 

      - name: Terraform Destroy
        id: destroy
        run: terraform destroy --auto-approve=true 
        continue-on-error: false

      - name: Terraform Plan
        id: plan
        run: terraform plan 
        continue-on-error: false
      
      - name: Terraform Apply
        id: apply
        run: terraform apply --auto-approve=true
      
      - name: Extract public IP
        id: ip
        run: |
          echo "PUBLIC_IP=$(terraform output -raw ip)" >> $GITHUB_ENV
  ansible:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: terraform
    defaults:
      run:
        working-directory: ansible
    steps:    
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Run Ansible playbook ubuntu
        run: |
          ansible-playbook ubuntu/playbook.yml \
            -u ${{ vars.SSH_USER }} \
            --private-key=${{ vars.AWS_PRIVATE_KEY }} \
            --extra-vars "ansible_host=${{ vars.PUBLIC_IP }}" \
            --ask-become-pass 
          
